import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from config import API_TOKEN, CHANNEL_USERNAME

bot = Bot(token=API_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()

@dp.message(F.text)
async def post_preview(message: types.Message):
    btn = InlineKeyboardButton(text="üìñ –î–∞–≤–æ–º–∏–Ω–∏ –∫—û—Ä–∏—à", callback_data="check_sub")
    markup = InlineKeyboardMarkup(inline_keyboard=[[btn]])
    await message.answer("–ü–æ—Å—Ç (“õ–∏—Å“õ–∞—á–∞):\n\n–ë—É –µ—Ä–¥–∞ “õ–∏—Å“õ–∞—á–∞ –º–∞—ä–ª—É–º–æ—Ç –±–æ—Ä...", reply_markup=markup)

@dp.callback_query(F.data == "check_sub")
async def check_subscription(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    chat_member = await bot.get_chat_member(chat_id=CHANNEL_USERNAME, user_id=user_id)

    if chat_member.status in ("member", "administrator", "creator"):
        await callback.message.answer("‚úÖ –û–±—É–Ω–∞ —Ç–∞—Å–¥–∏“õ–ª–∞–Ω–¥–∏.\n\nüëâ –ü–æ—Å—Ç –¥–∞–≤–æ–º–∏: –ë—É –µ—Ä–¥–∞ —Ç—û–ª–∏“õ –º–∞—ä–ª—É–º–æ—Ç...")
    else:
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì≤ –ö–∞–Ω–∞–ª–≥–∞ –æ–±—É–Ω–∞ –±—û–ª–∏—à", url=f"https://t.me/{CHANNEL_USERNAME[1:]}")],
            [InlineKeyboardButton(text="‚úÖ –¢–µ–∫—à–∏—Ä–∏—à", callback_data="check_sub")]
        ])
        await callback.message.answer("‚ùó –î–∞–≤–æ–º–∏–Ω–∏ –∫—û—Ä–∏—à —É—á—É–Ω –∫–∞–Ω–∞–ª–≥–∞ –æ–±—É–Ω–∞ –±—û–ª–∏–Ω–≥:", reply_markup=markup)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    import asyncio
    asyncio.run(dp.start_polling(bot))